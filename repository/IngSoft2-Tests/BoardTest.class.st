Class {
	#name : 'BoardTest',
	#superclass : 'TestCase',
	#category : 'IngSoft2-Tests',
	#package : 'IngSoft2-Tests'
}

{ #category : 'tests - instance' }
BoardTest >> testAtomicBombEffectResetsPositionsButKeepsLaps [

	| effect ship1 ship2 ship3 allShips |
	effect := AtomicBombEffect new.

	ship1 := Spaceship withName: 'Red'.
	ship2 := Spaceship withName: 'Blue'.
	ship3 := Spaceship withName: 'Green'.

	ship1 moveTo: 6.
	ship2 moveTo: 3.
	ship3 moveTo: 9.

	allShips := {
		ship1.
		ship2.
		ship3 }.

	effect applyTo: ship2 inContextOf: allShips.

	self assert: (LappedShip for: ship1) lapCount equals: 0.
	self assert: (LappedShip for: ship2) lapCount equals: 0.
	self assert: (LappedShip for: ship3) lapCount equals: 0.
]

{ #category : 'tests - instance' }
BoardTest >> testBlackHoleEffectMovesSpaceshipBackwards [
	| board ship |
	board := Board withCells: 5 andWormholes: #().
	ship := Spaceship withName: 'Lucas'.
	ship moveTo: 3.

	board cells at: 4 put: BlackHoleEffect new.
	board applyEffectTo: ship.

	self assert: ship position equals: 0.

]

{ #category : 'tests - instance' }
BoardTest >> testBoardCellsContainRecognizedEffects [
	| board validClasses |
	validClasses := { BlackHoleEffect. HyperGravityEffect. NoEffect. HyperJumpEffect }.

	board := Board withCells: 20 andWormholes: OrderedCollection new.

	self assert: (board cells allSatisfy: [:e |
		validClasses anySatisfy: [:c | e class = c ] ]).

]

{ #category : 'tests - instance' }
BoardTest >> testBoardInitializesCorrectNumberOfEffects [
	| board |
	board := Board withCells: 20 andWormholes: OrderedCollection new.

	self assert: board cells size equals: 20.

]

{ #category : 'tests - instance' }
BoardTest >> testBoardPreventsEntryToHyperGravityCellWithLowRoll [
	| board ship effect newPosition |

	board := Board withCells: 5 andWormholes: #().

	ship := Spaceship withName: 'Lucas'.
	ship moveTo: 2.

	effect := HyperGravityEffect new.
	effect requiredRoll: 4.
	board cells at: 4 put: effect.

	self assert: effect requiredRoll equals: 4.

	newPosition := board newPositionFrom: ship position steps: 1 for: (LappedShip for: ship) withRoll: 2.
	self assert: newPosition equals: 2.

	ship moveTo: newPosition.
	self assert: ship position equals: 2.

	board applyEffectTo: ship.

	self assert: ship lap equals: 0.
]

{ #category : 'tests - instance' }
BoardTest >> testCanEnterHyperGravityCellWithSufficientRoll [
	| board effect |
	board := Board withCells: 5 andWormholes: #().
	effect := HyperGravityEffect new.
	board cells at: 3 put: effect.

	self assert: (effect allowsEntryWithRoll: 5).

]

{ #category : 'tests - instance' }
BoardTest >> testCannotEnterHyperGravityCellWithLowRoll [
	| board effect |
	board := Board withCells: 5 andWormholes: #().
	effect := HyperGravityEffect new.
	board cells at: 3 put: effect.

	self deny: (effect allowsEntryWithRoll: 2).

]

{ #category : 'tests - instance' }
BoardTest >> testHyperGravityAllowsEntryWhenRollIsSufficient [
	| board ship effect newPosition |

	board := Board withCells: 5 andWormholes: #().
	ship := Spaceship withName: 'Lucas'.
	ship moveTo: 2.

	effect := HyperGravityEffect new.
	effect requiredRoll: 4.
	board cells at: 4 put: effect.

	newPosition := board newPositionFrom: ship position steps: 1 for: (LappedShip for: ship) withRoll: 5.
	self assert: newPosition equals: 3.

	ship moveTo: newPosition.
	board applyEffectTo: ship.

	self assert: ship position equals: 3.
]

{ #category : 'tests - instance' }
BoardTest >> testHyperGravityEffectHasCorrectDefaultRoll [
	| effect |
	effect := HyperGravityEffect new.
	self assert: effect requiredRoll equals: 4.

]

{ #category : 'tests - instance' }
BoardTest >> testHyperJumpEffectJumpsShipForward [
	| board ship effect newPosition |

	board := Board withCells: 10 andWormholes: #().
	self assert: board cells size equals: 10.

	effect := HyperJumpEffect new.
	board cells at: 7 put: effect.

	ship := Spaceship withName: 'Apollo'.
	ship moveTo: 5.
	self assert: ship position equals: 5.

	newPosition := board newPositionFrom: ship position steps: 1 for: ship withRoll: 1.
	self assert: newPosition equals: 6.

	ship moveTo: newPosition.
	self assert: ship position equals: 6.

	board applyEffectTo: ship.

	self assert: ship position equals: 9.
]

{ #category : 'tests - instance' }
BoardTest >> testIsGoalReached [
    | board |
    board := Board withCells: 10 andWormholes: #().

    self assert: (board isGoalReachedAt: 10).
    self assert: (board isGoalReachedAt: 11).
    self deny: (board isGoalReachedAt: 9).

]

{ #category : 'tests - instance' }
BoardTest >> testLapDoesNotIncrementWhenStayingWithinBounds [
	| board ship newPosition |
	board := Board withCells: 10 andWormholes: OrderedCollection new.
	ship := Spaceship withName: 'Lucas'.
	ship moveTo: 3.

	newPosition := board circularPositionFrom: ship position steps: 4 for: ship.

	self assert: newPosition equals: 7.
	self assert: ship lap equals: 0.

]

{ #category : 'tests - instance' }
BoardTest >> testLapIncrementsWhenPassingLastCell [
	| board ship newPosition |
	board := Board withCells: 10 andWormholes: OrderedCollection new.
	ship := Spaceship withName: 'Lucas'.
	ship moveTo: 8.

	newPosition := board circularPositionFrom: ship position steps: 3 for: (LappedShip for: ship) .

	self assert: newPosition equals: 1.
	self assert: (LappedShip for: ship) lapCount equals: 0.

]

{ #category : 'tests - instance' }
BoardTest >> testMoonWalkEffectMovesOtherSpaceshipsBackwards [
	| effect ship1 ship2 ship3 allShips |

	effect := MoonWalkEffect new.

	ship1 := Spaceship withName: 'Player1'.
	ship2 := Spaceship withName: 'Player2'.
	ship3 := Spaceship withName: 'Player3'.

	ship1 moveTo: 5.
	ship2 moveTo: 7.
	ship3 moveTo: 3.

	allShips := { ship1. ship2. ship3 }.

	effect applyTo: ship2 inContextOf: allShips.

	self assert: ship2 position equals: 7.
	self assert: ship1 position equals: 3.
	self assert: ship3 position equals: 1.
]

{ #category : 'tests - instance' }
BoardTest >> testNewPositionWithWormhole [
	| board ship |
	board := Board withCells: 25 andWormholes: (OrderedCollection with: (Wormhole from: 6 to: 20)).
	ship := Spaceship withName: 'Test'.

	self assert: (board newPositionFrom: 2 steps: 4 for: ship) equals: 20.

]

{ #category : 'tests - instance' }
BoardTest >> testNewPositionWithoutWormhole [
	| board ship |
	board := Board withCells: 25 andWormholes: #().
	ship := Spaceship withName: 'Test'.

	self assert: (board newPositionFrom: 2 steps: 2 for: ship) equals: 4.

]

{ #category : 'tests - instance' }
BoardTest >> testPositionWithoutWormholeReturnsSame [
    | board |
    board := Board withCells: 10 andWormholes: #().

    self assert: (board applyWormholeIfPresentAt: 5) equals: 5.

]

{ #category : 'tests - instance' }
BoardTest >> testWormholeTransportsCorrectly [
    | board |
    board := Board withCells: 20 andWormholes: (OrderedCollection withAll: {
        Wormhole from: 2 to: 10.
        Wormhole from: 10 to: 2.
    }).

    self assert: (board applyWormholeIfPresentAt: 2) equals: 10.
    self assert: (board applyWormholeIfPresentAt: 10) equals: 2.

]
